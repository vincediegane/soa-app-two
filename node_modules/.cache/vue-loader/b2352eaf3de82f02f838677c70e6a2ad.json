{"remainingRequest":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Vincent\\Desktop\\soa-app-two\\src\\components\\Wizard\\Wizard.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\src\\components\\Wizard\\Wizard.vue","mtime":1531217190000},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\sass-loader\\lib\\loader.js","mtime":1542636820899},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\soa-app-two\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Tab content animation */\n.tab-content {\n  display: flex; // to avoid horizontal scroll when animating\n  .tab-pane {\n    display: block;\n    animation: fadeIn 0.5s;\n    width: 100%;\n  }\n}\n\n/**\n  Extra niceties. Display error tabs and disable navigation unvisited tabs\n */\n.wizard-navigation .nav-link {\n  &.active,\n  &.checked {\n    cursor: pointer;\n  }\n}\n\n.disabled-wizard-link {\n  cursor: not-allowed;\n}\n",{"version":3,"sources":["Wizard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Wizard.vue","sourceRoot":"src\\components\\Wizard","sourcesContent":["<template>\n  <div class=\"wizard-container\">\n    <form @submit.prevent>\n      <!--        You can switch \" data-color=\"primary\" \"  with one of the next bright colors: \"green\", \"orange\", \"red\", \"blue\"       -->\n      <md-card class=\"md-card-wizard active\" data-color=\"green\">\n        <md-card-header>\n          <slot name=\"header\">\n            <h3 class=\"card-title\">{{title}}</h3>\n            <h3 class=\"description\">{{subTitle}}</h3>\n          </slot>\n        </md-card-header>\n        <div class=\"wizard-navigation\">\n          <ul class=\"nav nav-pills\" role=\"tablist\">\n            <li v-for=\"(tab, index) in tabs\"\n                :key=\"tab.title\"\n                role=\"tab\"\n                :tabindex=\"tab.checked ? 0 : ''\"\n                :id=\"`step-${tab.tabId}`\"\n                :aria-controls=\"tab.tabId\"\n                :aria-disabled=\"tab.active\"\n                :aria-selected=\"tab.active\"\n                :ref=\"`tab-${index}`\"\n                class=\"nav-item wizard-tab-link\"\n                :style=\"linkWidth\">\n              <a class=\"nav-link\"\n                 @click=\"navigateToTab(index)\"\n                 :class=\"[{'disabled-wizard-link': !tab.checked}, {active: tab.active}, {checked: tab.checked}]\"\n                 data-toggle=\"tab\">\n                <tab-item-content :tab=\"tab\"></tab-item-content>\n              </a>\n            </li>\n          </ul>\n          <div class=\"moving-tab\"\n               :class=\"{'error-link': activeTab.hasError}\"\n               v-if=\"activeTab\"\n               style=\"transition: transform 0.5s cubic-bezier(0.29, 1.42, 0.79, 1); width: 100%;\"\n               :style=\"movingTabStyles\">\n            <tab-item-content :tab=\"activeTab\" :moving-tab=\"true\"></tab-item-content>\n          </div>\n        </div>\n\n        <md-card-content>\n          <div class=\"tab-content\">\n            <slot :activeIndex=\"activeTabIndex\"\n                  :activeTab=\"activeTab\">\n            </slot>\n          </div>\n        </md-card-content>\n\n        <md-card-actions md-alignment=\"space-between\">\n          <slot name=\"footer\"\n                :next-tab=\"nextTab\"\n                :prev-tab=\"prevTab\">\n            <div>\n              <md-button v-if=\"activeTabIndex > 0\"\n                        @click.native=\"prevTab\"\n                        class=\"btn-previous\">\n                {{prevButtonText}}\n              </md-button>\n            </div>\n\n            <div>\n              <md-button v-if=\"activeTabIndex < tabCount -1\"\n                        @click.native=\"nextTab\"\n                        class=\"btn-next md-success\">\n                {{nextButtonText}}\n              </md-button>\n              <md-button\n                v-else\n                class=\"md-success\"\n                @click.native=\"nextTab\">{{finishButtonText}}</md-button>\n            </div>\n          </slot>\n        </md-card-actions>\n      </md-card>\n    </form>\n  </div>\n</template>\n<script>\n  import {throttle} from './throttle';\n\n  export default {\n    name: 'simple-wizard',\n    props: {\n      startIndex: {\n        type: Number,\n        default: 0\n      },\n      title: {\n        type: String,\n        default: 'Title'\n      },\n      subTitle: {\n        type: String,\n        default: 'Subtitle'\n      },\n      prevButtonText: {\n        type: String,\n        default: 'Previous'\n      },\n      nextButtonText: {\n        type: String,\n        default: 'Next'\n      },\n      finishButtonText: {\n        type: String,\n        default: 'Finish'\n      },\n      vertical: {\n        type: Boolean\n      }\n    },\n    components: {\n      TabItemContent: {\n        props: ['tab', 'movingTab'],\n        render(h) {\n          return h('span', [this.tab.$slots.label || this.tab.label])\n        }\n      }\n    },\n    provide() {\n      return {\n        addTab: this.addTab,\n        removeTab: this.removeTab\n      }\n    },\n    data() {\n      return {\n        tabs: [],\n        activeTabIndex: 0,\n        tabLinkWidth: 0,\n        tabLinkHeight: 50\n      }\n    },\n    computed: {\n      tabCount() {\n        return this.tabs.length;\n      },\n      linkWidth() {\n        let width = 100;\n        if (this.tabCount > 0) {\n          width = 100 / this.tabCount\n        }\n        if (this.vertical) {\n          width = 100;\n        }\n        return {width: `${width}%`};\n      },\n      activeTab() {\n        return this.tabs[this.activeTabIndex]\n      },\n      movingTabStyles() {\n        let translateXValue = (this.activeTabIndex == 0) ? (this.tabLinkWidth * this.activeTabIndex) - 8 : (this.activeTabIndex == (this.tabCount - 1)) ? (this.tabLinkWidth * this.activeTabIndex) + 8 : this.tabLinkWidth * this.activeTabIndex;\n\n        let translateYValue = 0;\n        if (this.vertical) {\n          translateYValue = this.tabLinkHeight * this.activeTabIndex\n          translateXValue = 0;\n        }\n        let styles = {\n          transform: `translate3d(${translateXValue}px, ${translateYValue}px, 0px)`\n        };\n        if (this.tabLinkWidth !== 0) {\n          styles.width = `${this.tabLinkWidth}px`;\n        }\n        return styles;\n      }\n    },\n    methods: {\n      addTab(tab) {\n        const index = this.$slots.default.indexOf(tab.$vnode);\n        let tabTitle = tab.title || '';\n        tab.tabId = `${tabTitle.replace(/ /g, '')}${index}`\n        if (!this.activeTab && index === 0) {\n          tab.active = true;\n          tab.checked = true\n        }\n        if (this.activeTab === tab.name) {\n          tab.active = true;\n          tab.checked = true;\n        }\n        this.tabs.splice(index, 0, tab)\n      },\n      removeTab(tab) {\n        const tabs = this.tabs;\n        const index = tabs.indexOf(tab);\n        if (index > -1) {\n          tabs.splice(index, 1)\n        }\n      },\n      validate(tab) {\n        let tabToValidate = tab || this.activeTab\n        let beforeChange = tabToValidate.beforeChange\n        if (beforeChange) {\n          return Promise.resolve(beforeChange()).then(res => {\n            this.activeTab.hasError = res ? false : true\n            return res;\n          }).catch(() => {\n            this.activeTab.hasError = true\n          })\n        } else {\n          return Promise.resolve(true);\n        }\n      },\n      async nextTab() {\n        let isValid = await this.validate();\n        if (isValid && this.activeTabIndex < this.tabCount - 1) {\n          this.activeTabIndex++\n        }\n        return isValid\n      },\n      prevTab() {\n        this.activeTabIndex--;\n      },\n      async navigateToTab(index) {\n        if (this.tabs[index].checked) {\n          // recursively validate each tab\n          if (index > this.activeTabIndex) {\n            let valid = await this.nextTab();\n            if (valid) {\n              this.navigateToTab(index)\n            }\n          } else {\n            this.activeTabIndex = index\n          }\n        }\n      },\n      onResize() {\n        let tabLinks = document.getElementsByClassName('wizard-tab-link');\n        if (tabLinks.length > 0 && this.tabCount > 0) {\n          let {clientWidth, clientHeight} = tabLinks[0];\n          this.tabLinkWidth = clientWidth;\n          this.tabLinkHeight = clientHeight;\n        }\n      }\n    },\n    mounted() {\n      this.activeTabIndex = this.startIndex;\n      this.$nextTick(() => {\n        this.tabs[this.activeTabIndex].active = true;\n        this.tabs[this.activeTabIndex].checked = true;\n        this.onResize();\n      });\n      window.addEventListener('resize', () => {\n        throttle(this.onResize, 40)\n      }, false);\n    },\n    watch: {\n      activeTabIndex(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          let oldTab = this.tabs[oldValue];\n          let newTab = this.tabs[newValue];\n          oldTab.active = false;\n          newTab.active = true;\n\n          if (!newTab.checked) {\n            newTab.checked = true\n          }\n          this.$emit('tab-change', oldTab, newTab);\n          this.$emit('update:startIndex', newValue);\n        }\n      }\n    }\n  }\n</script>\n<style lang=\"scss\">\n  /* Tab content animation */\n  .tab-content {\n    display: flex; // to avoid horizontal scroll when animating\n    .tab-pane {\n      display: block;\n      animation: fadeIn 0.5s;\n      width: 100%;\n    }\n  }\n\n  /**\n    Extra niceties. Display error tabs and disable navigation unvisited tabs\n   */\n  .wizard-navigation .nav-link {\n    &.active,\n    &.checked {\n      cursor: pointer;\n    }\n  }\n\n  .disabled-wizard-link {\n    cursor: not-allowed;\n  }\n</style>\n"]}]}