{"remainingRequest":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\src\\pages\\Dashboard\\Tables\\PaginatedTables.vue?vue&type=style&index=0&id=3f5d70e7&lang=css&scoped=true&","dependencies":[{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\src\\pages\\Dashboard\\Tables\\PaginatedTables.vue","mtime":1531217190000},{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Vincent\\Desktop\\PROJECTS\\VueJs\\soa-app-two\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.md-card .md-card-actions{\n  border: 0;\n  margin-left: 20px;\n  margin-right: 20px;\n}\n",{"version":3,"sources":["PaginatedTables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;AACA;AACA;AACA;AACA","file":"PaginatedTables.vue","sourceRoot":"src\\pages\\Dashboard\\Tables","sourcesContent":["<template>\n  <div class=\"md-layout\">\n    <div class=\"md-layout-item\">\n      <md-card>\n        <md-card-header class=\"md-card-header-icon md-card-header-green\">\n          <div class=\"card-icon\">\n            <md-icon>assignment</md-icon>\n          </div>\n          <h4 class=\"title\">Paginated Tables</h4>\n        </md-card-header>\n        <md-card-content>\n          <md-table :value=\"queriedData\" :md-sort.sync=\"currentSort\" :md-sort-order.sync=\"currentSortOrder\" :md-sort-fn=\"customSort\" class=\"paginated-table table-striped table-hover\">\n            <md-table-toolbar>\n              <md-field>\n                <label for=\"pages\">Per page</label>\n                <md-select v-model=\"pagination.perPage\" name=\"pages\">\n                  <md-option\n                    v-for=\"item in pagination.perPageOptions\"\n                    :key=\"item\"\n                    :label=\"item\"\n                    :value=\"item\">\n                    {{ item }}\n                  </md-option>\n                </md-select>\n              </md-field>\n\n              <md-field>\n                <md-input\n                  type=\"search\"\n                  class=\"mb-3\"\n                  clearable\n                  style=\"width: 200px\"\n                  placeholder=\"Search records\"\n                  v-model=\"searchQuery\">\n                </md-input>\n              </md-field>\n            </md-table-toolbar>\n\n            <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n              <md-table-cell md-label=\"Name\" md-sort-by=\"name\">{{ item.name }}</md-table-cell>\n              <md-table-cell md-label=\"Email\" md-sort-by=\"email\">{{ item.email }}</md-table-cell>\n              <md-table-cell md-label=\"Age\">{{ item.age }}</md-table-cell>\n              <md-table-cell md-label=\"Salary\" >{{ item.salary }}</md-table-cell>\n              <md-table-cell md-label=\"Actions\">\n                <md-button\n                  class=\"md-just-icon md-info md-simple\"\n                  @click.native=\"handleLike(item)\">\n                  <md-icon>favorite</md-icon>\n                </md-button>\n                <md-button\n                  class=\"md-just-icon md-warning md-simple\"\n                  @click.native=\"handleEdit(item)\">\n                  <md-icon>dvr</md-icon>\n                </md-button>\n                <md-button\n                  class=\"md-just-icon md-danger md-simple\"\n                  @click.native=\"handleDelete(item)\">\n                  <md-icon>close</md-icon>\n                </md-button>\n              </md-table-cell>\n            </md-table-row>\n          </md-table>\n          <div class=\"footer-table md-table\">\n            <table>\n              <tfoot>\n                <tr>\n                  <th v-for=\"item in footerTable\" :key=\"item.name\" class=\"md-table-head\">\n                    <div class=\"md-table-head-container md-ripple md-disabled\">\n                      <div class=\"md-table-head-label\">\n                        {{item}}\n                      </div>\n                    </div>\n                  </th>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </md-card-content>\n        <md-card-actions md-alignment=\"space-between\">\n          <div class=\"\">\n            <p class=\"card-category\">Showing {{from + 1}} to {{to}} of {{total}} entries</p>\n          </div>\n          <pagination class=\"pagination-no-border pagination-success\"\n                        v-model=\"pagination.currentPage\"\n                        :per-page=\"pagination.perPage\"\n                        :total=\"total\">\n          </pagination>\n        </md-card-actions>\n      </md-card>\n    </div>\n  </div>\n\n</template>\n\n<script>\n  import {Table, TableColumn, Select, Option} from 'element-ui'\n  import {Pagination} from '@/components'\n  import users from './users'\n  import Fuse from 'fuse.js'\n  import swal from 'sweetalert2'\n\n  export default {\n    components: {\n      Pagination,\n      [Select.name]: Select,\n      [Option.name]: Option,\n      [Table.name]: Table,\n      [TableColumn.name]: TableColumn\n    },\n    computed: {\n      /***\n       * Returns a page from the searched data or the whole data. Search is performed in the watch section below\n       */\n       queriedData () {\n         let result = this.tableData;\n         if(this.searchedData.length > 0){\n           result = this.searchedData;\n         }\n         return result.slice(this.from, this.to)\n       },\n      to () {\n        let highBound = this.from + this.pagination.perPage\n        if (this.total < highBound) {\n          highBound = this.total\n        }\n        return highBound\n      },\n      from () {\n        return this.pagination.perPage * (this.pagination.currentPage - 1)\n      },\n      total () {\n        return this.searchedData.length > 0 ? this.searchedData.length : this.tableData.length;\n      }\n    },\n    data () {\n      return {\n        currentSort: 'name',\n     currentSortOrder: 'asc',\n        pagination: {\n          perPage: 5,\n          currentPage: 1,\n          perPageOptions: [5, 10, 25, 50],\n          total: 0\n        },\n        footerTable: ['Name', 'Email', 'Age', 'Salary', 'Actions'],\n        searchQuery: '',\n        propsToSearch: ['name', 'email', 'age'],\n        tableData: users,\n        searchedData: [],\n        fuseSearch: null\n      }\n    },\n    methods: {\n      customSort (value) {\n        return value.sort((a, b) => {\n          const sortBy = this.currentSort\n          if (this.currentSortOrder === 'desc') {\n            return a[sortBy].localeCompare(b[sortBy])\n          }\n          return b[sortBy].localeCompare(a[sortBy])\n        })\n      },\n      handleLike (item) {\n        swal({\n          title: `You liked ${item.name}`,\n          buttonsStyling: false,\n          type: 'success',\n          confirmButtonClass: 'md-button md-success'\n        })\n      },\n      handleEdit (item) {\n        swal({\n          title: `You want to edit ${item.name}`,\n          buttonsStyling: false,\n          confirmButtonClass: 'md-button md-info'\n        });\n      },\n      handleDelete (item) {\n        swal({\n          title: 'Are you sure?',\n          text: `You won't be able to revert this!`,\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonClass: 'md-button md-success btn-fill',\n          cancelButtonClass: 'md-button md-danger btn-fill',\n          confirmButtonText: 'Yes, delete it!',\n          buttonsStyling: false\n        }).then((result) => {\n          if(result.value){\n            this.deleteRow(item);\n            swal({\n              title: 'Deleted!',\n              text: `You deleted ${item.name}`,\n              type: 'success',\n              confirmButtonClass: 'md-button md-success btn-fill',\n              buttonsStyling: false\n            })\n          }\n        });\n      },\n      deleteRow(item){\n        let indexToDelete = this.tableData.findIndex((tableRow) => tableRow.id === item.id);\n        if (indexToDelete >= 0) {\n          this.tableData.splice(indexToDelete, 1)\n        }\n      }\n    },\n    mounted () {\n      // Fuse search initialization.\n      this.fuseSearch = new Fuse(this.tableData, {keys: ['name', 'email'], threshold: 0.3})\n    },\n    watch: {\n      /**\n       * Searches through the table data by a given query.\n       * NOTE: If you have a lot of data, it's recommended to do the search on the Server Side and only display the results here.\n       * @param value of the query\n       */\n      searchQuery(value){\n        let result = this.tableData;\n        if (value !== '') {\n          result = this.fuseSearch.search(this.searchQuery)\n        }\n        this.searchedData = result;\n      }\n    }\n  }\n</script>\n\n<style lang=\"css\" scoped>\n.md-card .md-card-actions{\n  border: 0;\n  margin-left: 20px;\n  margin-right: 20px;\n}\n</style>\n"]}]}